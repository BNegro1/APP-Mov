{"ast":null,"code":"/**\n * @license Angular v18.2.9\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\n/**\n * The default equality function used for `signal` and `computed`, which uses referential equality.\n */\nfunction defaultEquals(a, b) {\n  return Object.is(a, b);\n}\n\n/**\n * The currently active consumer `ReactiveNode`, if running code in a reactive context.\n *\n * Change this via `setActiveConsumer`.\n */\nlet activeConsumer = null;\nlet inNotificationPhase = false;\n/**\n * Global epoch counter. Incremented whenever a source signal is set.\n */\nlet epoch = 1;\n/**\n * Symbol used to tell `Signal`s apart from other functions.\n *\n * This can be used to auto-unwrap signals in various cases, or to auto-wrap non-signal values.\n */\nconst SIGNAL = /* @__PURE__ */Symbol('SIGNAL');\nfunction setActiveConsumer(consumer) {\n  const prev = activeConsumer;\n  activeConsumer = consumer;\n  return prev;\n}\nfunction getActiveConsumer() {\n  return activeConsumer;\n}\nfunction isInNotificationPhase() {\n  return inNotificationPhase;\n}\nfunction isReactive(value) {\n  return value[SIGNAL] !== undefined;\n}\nconst REACTIVE_NODE = {\n  version: 0,\n  lastCleanEpoch: 0,\n  dirty: false,\n  producerNode: undefined,\n  producerLastReadVersion: undefined,\n  producerIndexOfThis: undefined,\n  nextProducerIndex: 0,\n  liveConsumerNode: undefined,\n  liveConsumerIndexOfThis: undefined,\n  consumerAllowSignalWrites: false,\n  consumerIsAlwaysLive: false,\n  producerMustRecompute: () => false,\n  producerRecomputeValue: () => {},\n  consumerMarkedDirty: () => {},\n  consumerOnSignalRead: () => {}\n};\n/**\n * Called by implementations when a producer's signal is read.\n */\nfunction producerAccessed(node) {\n  if (inNotificationPhase) {\n    throw new Error(typeof ngDevMode !== 'undefined' && ngDevMode ? `Assertion error: signal read during notification phase` : '');\n  }\n  if (activeConsumer === null) {\n    // Accessed outside of a reactive context, so nothing to record.\n    return;\n  }\n  activeConsumer.consumerOnSignalRead(node);\n  // This producer is the `idx`th dependency of `activeConsumer`.\n  const idx = activeConsumer.nextProducerIndex++;\n  assertConsumerNode(activeConsumer);\n  if (idx < activeConsumer.producerNode.length && activeConsumer.producerNode[idx] !== node) {\n    // There's been a change in producers since the last execution of `activeConsumer`.\n    // `activeConsumer.producerNode[idx]` holds a stale dependency which will be be removed and\n    // replaced with `this`.\n    //\n    // If `activeConsumer` isn't live, then this is a no-op, since we can replace the producer in\n    // `activeConsumer.producerNode` directly. However, if `activeConsumer` is live, then we need\n    // to remove it from the stale producer's `liveConsumer`s.\n    if (consumerIsLive(activeConsumer)) {\n      const staleProducer = activeConsumer.producerNode[idx];\n      producerRemoveLiveConsumerAtIndex(staleProducer, activeConsumer.producerIndexOfThis[idx]);\n      // At this point, the only record of `staleProducer` is the reference at\n      // `activeConsumer.producerNode[idx]` which will be overwritten below.\n    }\n  }\n  if (activeConsumer.producerNode[idx] !== node) {\n    // We're a new dependency of the consumer (at `idx`).\n    activeConsumer.producerNode[idx] = node;\n    // If the active consumer is live, then add it as a live consumer. If not, then use 0 as a\n    // placeholder value.\n    activeConsumer.producerIndexOfThis[idx] = consumerIsLive(activeConsumer) ? producerAddLiveConsumer(node, activeConsumer, idx) : 0;\n  }\n  activeConsumer.producerLastReadVersion[idx] = node.version;\n}\n/**\n * Increment the global epoch counter.\n *\n * Called by source producers (that is, not computeds) whenever their values change.\n */\nfunction producerIncrementEpoch() {\n  epoch++;\n}\n/**\n * Ensure this producer's `version` is up-to-date.\n */\nfunction producerUpdateValueVersion(node) {\n  if (consumerIsLive(node) && !node.dirty) {\n    // A live consumer will be marked dirty by producers, so a clean state means that its version\n    // is guaranteed to be up-to-date.\n    return;\n  }\n  if (!node.dirty && node.lastCleanEpoch === epoch) {\n    // Even non-live consumers can skip polling if they previously found themselves to be clean at\n    // the current epoch, since their dependencies could not possibly have changed (such a change\n    // would've increased the epoch).\n    return;\n  }\n  if (!node.producerMustRecompute(node) && !consumerPollProducersForChange(node)) {\n    // None of our producers report a change since the last time they were read, so no\n    // recomputation of our value is necessary, and we can consider ourselves clean.\n    node.dirty = false;\n    node.lastCleanEpoch = epoch;\n    return;\n  }\n  node.producerRecomputeValue(node);\n  // After recomputing the value, we're no longer dirty.\n  node.dirty = false;\n  node.lastCleanEpoch = epoch;\n}\n/**\n * Propagate a dirty notification to live consumers of this producer.\n */\nfunction producerNotifyConsumers(node) {\n  if (node.liveConsumerNode === undefined) {\n    return;\n  }\n  // Prevent signal reads when we're updating the graph\n  const prev = inNotificationPhase;\n  inNotificationPhase = true;\n  try {\n    for (const consumer of node.liveConsumerNode) {\n      if (!consumer.dirty) {\n        consumerMarkDirty(consumer);\n      }\n    }\n  } finally {\n    inNotificationPhase = prev;\n  }\n}\n/**\n * Whether this `ReactiveNode` in its producer capacity is currently allowed to initiate updates,\n * based on the current consumer context.\n */\nfunction producerUpdatesAllowed() {\n  var _activeConsumer;\n  return ((_activeConsumer = activeConsumer) === null || _activeConsumer === void 0 ? void 0 : _activeConsumer.consumerAllowSignalWrites) !== false;\n}\nfunction consumerMarkDirty(node) {\n  var _node$consumerMarkedD;\n  node.dirty = true;\n  producerNotifyConsumers(node);\n  (_node$consumerMarkedD = node.consumerMarkedDirty) === null || _node$consumerMarkedD === void 0 || _node$consumerMarkedD.call(node, node);\n}\n/**\n * Prepare this consumer to run a computation in its reactive context.\n *\n * Must be called by subclasses which represent reactive computations, before those computations\n * begin.\n */\nfunction consumerBeforeComputation(node) {\n  node && (node.nextProducerIndex = 0);\n  return setActiveConsumer(node);\n}\n/**\n * Finalize this consumer's state after a reactive computation has run.\n *\n * Must be called by subclasses which represent reactive computations, after those computations\n * have finished.\n */\nfunction consumerAfterComputation(node, prevConsumer) {\n  setActiveConsumer(prevConsumer);\n  if (!node || node.producerNode === undefined || node.producerIndexOfThis === undefined || node.producerLastReadVersion === undefined) {\n    return;\n  }\n  if (consumerIsLive(node)) {\n    // For live consumers, we need to remove the producer -> consumer edge for any stale producers\n    // which weren't dependencies after the recomputation.\n    for (let i = node.nextProducerIndex; i < node.producerNode.length; i++) {\n      producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);\n    }\n  }\n  // Truncate the producer tracking arrays.\n  // Perf note: this is essentially truncating the length to `node.nextProducerIndex`, but\n  // benchmarking has shown that individual pop operations are faster.\n  while (node.producerNode.length > node.nextProducerIndex) {\n    node.producerNode.pop();\n    node.producerLastReadVersion.pop();\n    node.producerIndexOfThis.pop();\n  }\n}\n/**\n * Determine whether this consumer has any dependencies which have changed since the last time\n * they were read.\n */\nfunction consumerPollProducersForChange(node) {\n  assertConsumerNode(node);\n  // Poll producers for change.\n  for (let i = 0; i < node.producerNode.length; i++) {\n    const producer = node.producerNode[i];\n    const seenVersion = node.producerLastReadVersion[i];\n    // First check the versions. A mismatch means that the producer's value is known to have\n    // changed since the last time we read it.\n    if (seenVersion !== producer.version) {\n      return true;\n    }\n    // The producer's version is the same as the last time we read it, but it might itself be\n    // stale. Force the producer to recompute its version (calculating a new value if necessary).\n    producerUpdateValueVersion(producer);\n    // Now when we do this check, `producer.version` is guaranteed to be up to date, so if the\n    // versions still match then it has not changed since the last time we read it.\n    if (seenVersion !== producer.version) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Disconnect this consumer from the graph.\n */\nfunction consumerDestroy(node) {\n  assertConsumerNode(node);\n  if (consumerIsLive(node)) {\n    // Drop all connections from the graph to this node.\n    for (let i = 0; i < node.producerNode.length; i++) {\n      producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);\n    }\n  }\n  // Truncate all the arrays to drop all connection from this node to the graph.\n  node.producerNode.length = node.producerLastReadVersion.length = node.producerIndexOfThis.length = 0;\n  if (node.liveConsumerNode) {\n    node.liveConsumerNode.length = node.liveConsumerIndexOfThis.length = 0;\n  }\n}\n/**\n * Add `consumer` as a live consumer of this node.\n *\n * Note that this operation is potentially transitive. If this node becomes live, then it becomes\n * a live consumer of all of its current producers.\n */\nfunction producerAddLiveConsumer(node, consumer, indexOfThis) {\n  assertProducerNode(node);\n  if (node.liveConsumerNode.length === 0 && isConsumerNode(node)) {\n    // When going from 0 to 1 live consumers, we become a live consumer to our producers.\n    for (let i = 0; i < node.producerNode.length; i++) {\n      node.producerIndexOfThis[i] = producerAddLiveConsumer(node.producerNode[i], node, i);\n    }\n  }\n  node.liveConsumerIndexOfThis.push(indexOfThis);\n  return node.liveConsumerNode.push(consumer) - 1;\n}\n/**\n * Remove the live consumer at `idx`.\n */\nfunction producerRemoveLiveConsumerAtIndex(node, idx) {\n  assertProducerNode(node);\n  if (typeof ngDevMode !== 'undefined' && ngDevMode && idx >= node.liveConsumerNode.length) {\n    throw new Error(`Assertion error: active consumer index ${idx} is out of bounds of ${node.liveConsumerNode.length} consumers)`);\n  }\n  if (node.liveConsumerNode.length === 1 && isConsumerNode(node)) {\n    // When removing the last live consumer, we will no longer be live. We need to remove\n    // ourselves from our producers' tracking (which may cause consumer-producers to lose\n    // liveness as well).\n    for (let i = 0; i < node.producerNode.length; i++) {\n      producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);\n    }\n  }\n  // Move the last value of `liveConsumers` into `idx`. Note that if there's only a single\n  // live consumer, this is a no-op.\n  const lastIdx = node.liveConsumerNode.length - 1;\n  node.liveConsumerNode[idx] = node.liveConsumerNode[lastIdx];\n  node.liveConsumerIndexOfThis[idx] = node.liveConsumerIndexOfThis[lastIdx];\n  // Truncate the array.\n  node.liveConsumerNode.length--;\n  node.liveConsumerIndexOfThis.length--;\n  // If the index is still valid, then we need to fix the index pointer from the producer to this\n  // consumer, and update it from `lastIdx` to `idx` (accounting for the move above).\n  if (idx < node.liveConsumerNode.length) {\n    const idxProducer = node.liveConsumerIndexOfThis[idx];\n    const consumer = node.liveConsumerNode[idx];\n    assertConsumerNode(consumer);\n    consumer.producerIndexOfThis[idxProducer] = idx;\n  }\n}\nfunction consumerIsLive(node) {\n  var _node$liveConsumerNod, _node$liveConsumerNod2;\n  return node.consumerIsAlwaysLive || ((_node$liveConsumerNod = node === null || node === void 0 || (_node$liveConsumerNod2 = node.liveConsumerNode) === null || _node$liveConsumerNod2 === void 0 ? void 0 : _node$liveConsumerNod2.length) !== null && _node$liveConsumerNod !== void 0 ? _node$liveConsumerNod : 0) > 0;\n}\nfunction assertConsumerNode(node) {\n  var _node$producerNode, _node$producerIndexOf, _node$producerLastRea;\n  (_node$producerNode = node.producerNode) !== null && _node$producerNode !== void 0 ? _node$producerNode : node.producerNode = [];\n  (_node$producerIndexOf = node.producerIndexOfThis) !== null && _node$producerIndexOf !== void 0 ? _node$producerIndexOf : node.producerIndexOfThis = [];\n  (_node$producerLastRea = node.producerLastReadVersion) !== null && _node$producerLastRea !== void 0 ? _node$producerLastRea : node.producerLastReadVersion = [];\n}\nfunction assertProducerNode(node) {\n  var _node$liveConsumerNod3, _node$liveConsumerInd;\n  (_node$liveConsumerNod3 = node.liveConsumerNode) !== null && _node$liveConsumerNod3 !== void 0 ? _node$liveConsumerNod3 : node.liveConsumerNode = [];\n  (_node$liveConsumerInd = node.liveConsumerIndexOfThis) !== null && _node$liveConsumerInd !== void 0 ? _node$liveConsumerInd : node.liveConsumerIndexOfThis = [];\n}\nfunction isConsumerNode(node) {\n  return node.producerNode !== undefined;\n}\n\n/**\n * Create a computed signal which derives a reactive value from an expression.\n */\nfunction createComputed(computation) {\n  const node = Object.create(COMPUTED_NODE);\n  node.computation = computation;\n  const computed = () => {\n    // Check if the value needs updating before returning it.\n    producerUpdateValueVersion(node);\n    // Record that someone looked at this signal.\n    producerAccessed(node);\n    if (node.value === ERRORED) {\n      throw node.error;\n    }\n    return node.value;\n  };\n  computed[SIGNAL] = node;\n  return computed;\n}\n/**\n * A dedicated symbol used before a computed value has been calculated for the first time.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nconst UNSET = /* @__PURE__ */Symbol('UNSET');\n/**\n * A dedicated symbol used in place of a computed signal value to indicate that a given computation\n * is in progress. Used to detect cycles in computation chains.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nconst COMPUTING = /* @__PURE__ */Symbol('COMPUTING');\n/**\n * A dedicated symbol used in place of a computed signal value to indicate that a given computation\n * failed. The thrown error is cached until the computation gets dirty again.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nconst ERRORED = /* @__PURE__ */Symbol('ERRORED');\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst COMPUTED_NODE = /* @__PURE__ */(() => {\n  return {\n    ...REACTIVE_NODE,\n    value: UNSET,\n    dirty: true,\n    error: null,\n    equal: defaultEquals,\n    producerMustRecompute(node) {\n      // Force a recomputation if there's no current value, or if the current value is in the\n      // process of being calculated (which should throw an error).\n      return node.value === UNSET || node.value === COMPUTING;\n    },\n    producerRecomputeValue(node) {\n      if (node.value === COMPUTING) {\n        // Our computation somehow led to a cyclic read of itself.\n        throw new Error('Detected cycle in computations.');\n      }\n      const oldValue = node.value;\n      node.value = COMPUTING;\n      const prevConsumer = consumerBeforeComputation(node);\n      let newValue;\n      try {\n        newValue = node.computation();\n      } catch (err) {\n        newValue = ERRORED;\n        node.error = err;\n      } finally {\n        consumerAfterComputation(node, prevConsumer);\n      }\n      if (oldValue !== UNSET && oldValue !== ERRORED && newValue !== ERRORED && node.equal(oldValue, newValue)) {\n        // No change to `valueVersion` - old and new values are\n        // semantically equivalent.\n        node.value = oldValue;\n        return;\n      }\n      node.value = newValue;\n      node.version++;\n    }\n  };\n})();\nfunction defaultThrowError() {\n  throw new Error();\n}\nlet throwInvalidWriteToSignalErrorFn = defaultThrowError;\nfunction throwInvalidWriteToSignalError() {\n  throwInvalidWriteToSignalErrorFn();\n}\nfunction setThrowInvalidWriteToSignalError(fn) {\n  throwInvalidWriteToSignalErrorFn = fn;\n}\n\n/**\n * If set, called after `WritableSignal`s are updated.\n *\n * This hook can be used to achieve various effects, such as running effects synchronously as part\n * of setting a signal.\n */\nlet postSignalSetFn = null;\n/**\n * Create a `Signal` that can be set or updated directly.\n */\nfunction createSignal(initialValue) {\n  const node = Object.create(SIGNAL_NODE);\n  node.value = initialValue;\n  const getter = () => {\n    producerAccessed(node);\n    return node.value;\n  };\n  getter[SIGNAL] = node;\n  return getter;\n}\nfunction setPostSignalSetFn(fn) {\n  const prev = postSignalSetFn;\n  postSignalSetFn = fn;\n  return prev;\n}\nfunction signalGetFn() {\n  producerAccessed(this);\n  return this.value;\n}\nfunction signalSetFn(node, newValue) {\n  if (!producerUpdatesAllowed()) {\n    throwInvalidWriteToSignalError();\n  }\n  if (!node.equal(node.value, newValue)) {\n    node.value = newValue;\n    signalValueChanged(node);\n  }\n}\nfunction signalUpdateFn(node, updater) {\n  if (!producerUpdatesAllowed()) {\n    throwInvalidWriteToSignalError();\n  }\n  signalSetFn(node, updater(node.value));\n}\nfunction runPostSignalSetFn() {\n  var _postSignalSetFn;\n  (_postSignalSetFn = postSignalSetFn) === null || _postSignalSetFn === void 0 || _postSignalSetFn();\n}\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst SIGNAL_NODE = /* @__PURE__ */(() => {\n  return {\n    ...REACTIVE_NODE,\n    equal: defaultEquals,\n    value: undefined\n  };\n})();\nfunction signalValueChanged(node) {\n  var _postSignalSetFn2;\n  node.version++;\n  producerIncrementEpoch();\n  producerNotifyConsumers(node);\n  (_postSignalSetFn2 = postSignalSetFn) === null || _postSignalSetFn2 === void 0 || _postSignalSetFn2();\n}\nfunction createWatch(fn, schedule, allowSignalWrites) {\n  const node = Object.create(WATCH_NODE);\n  if (allowSignalWrites) {\n    node.consumerAllowSignalWrites = true;\n  }\n  node.fn = fn;\n  node.schedule = schedule;\n  const registerOnCleanup = cleanupFn => {\n    node.cleanupFn = cleanupFn;\n  };\n  function isWatchNodeDestroyed(node) {\n    return node.fn === null && node.schedule === null;\n  }\n  function destroyWatchNode(node) {\n    if (!isWatchNodeDestroyed(node)) {\n      consumerDestroy(node); // disconnect watcher from the reactive graph\n      node.cleanupFn();\n      // nullify references to the integration functions to mark node as destroyed\n      node.fn = null;\n      node.schedule = null;\n      node.cleanupFn = NOOP_CLEANUP_FN;\n    }\n  }\n  const run = () => {\n    if (node.fn === null) {\n      // trying to run a destroyed watch is noop\n      return;\n    }\n    if (isInNotificationPhase()) {\n      throw new Error(`Schedulers cannot synchronously execute watches while scheduling.`);\n    }\n    node.dirty = false;\n    if (node.hasRun && !consumerPollProducersForChange(node)) {\n      return;\n    }\n    node.hasRun = true;\n    const prevConsumer = consumerBeforeComputation(node);\n    try {\n      node.cleanupFn();\n      node.cleanupFn = NOOP_CLEANUP_FN;\n      node.fn(registerOnCleanup);\n    } finally {\n      consumerAfterComputation(node, prevConsumer);\n    }\n  };\n  node.ref = {\n    notify: () => consumerMarkDirty(node),\n    run,\n    cleanup: () => node.cleanupFn(),\n    destroy: () => destroyWatchNode(node),\n    [SIGNAL]: node\n  };\n  return node.ref;\n}\nconst NOOP_CLEANUP_FN = () => {};\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst WATCH_NODE = /* @__PURE__ */(() => {\n  return {\n    ...REACTIVE_NODE,\n    consumerIsAlwaysLive: true,\n    consumerAllowSignalWrites: false,\n    consumerMarkedDirty: node => {\n      if (node.schedule !== null) {\n        node.schedule(node.ref);\n      }\n    },\n    hasRun: false,\n    cleanupFn: NOOP_CLEANUP_FN\n  };\n})();\nfunction setAlternateWeakRefImpl(impl) {\n  // TODO: remove this function\n}\nexport { REACTIVE_NODE, SIGNAL, SIGNAL_NODE, consumerAfterComputation, consumerBeforeComputation, consumerDestroy, consumerMarkDirty, consumerPollProducersForChange, createComputed, createSignal, createWatch, defaultEquals, getActiveConsumer, isInNotificationPhase, isReactive, producerAccessed, producerIncrementEpoch, producerNotifyConsumers, producerUpdateValueVersion, producerUpdatesAllowed, runPostSignalSetFn, setActiveConsumer, setAlternateWeakRefImpl, setPostSignalSetFn, setThrowInvalidWriteToSignalError, signalSetFn, signalUpdateFn };","map":{"version":3,"names":["defaultEquals","a","b","Object","is","activeConsumer","inNotificationPhase","epoch","SIGNAL","Symbol","setActiveConsumer","consumer","prev","getActiveConsumer","isInNotificationPhase","isReactive","value","undefined","REACTIVE_NODE","version","lastCleanEpoch","dirty","producerNode","producerLastReadVersion","producerIndexOfThis","nextProducerIndex","liveConsumerNode","liveConsumerIndexOfThis","consumerAllowSignalWrites","consumerIsAlwaysLive","producerMustRecompute","producerRecomputeValue","consumerMarkedDirty","consumerOnSignalRead","producerAccessed","node","Error","ngDevMode","idx","assertConsumerNode","length","consumerIsLive","staleProducer","producerRemoveLiveConsumerAtIndex","producerAddLiveConsumer","producerIncrementEpoch","producerUpdateValueVersion","consumerPollProducersForChange","producerNotifyConsumers","consumerMarkDirty","producerUpdatesAllowed","_activeConsumer","_node$consumerMarkedD","call","consumerBeforeComputation","consumerAfterComputation","prevConsumer","i","pop","producer","seenVersion","consumerDestroy","indexOfThis","assertProducerNode","isConsumerNode","push","lastIdx","idxProducer","_node$liveConsumerNod","_node$liveConsumerNod2","_node$producerNode","_node$producerIndexOf","_node$producerLastRea","_node$liveConsumerNod3","_node$liveConsumerInd","createComputed","computation","create","COMPUTED_NODE","computed","ERRORED","error","UNSET","COMPUTING","equal","oldValue","newValue","err","defaultThrowError","throwInvalidWriteToSignalErrorFn","throwInvalidWriteToSignalError","setThrowInvalidWriteToSignalError","fn","postSignalSetFn","createSignal","initialValue","SIGNAL_NODE","getter","setPostSignalSetFn","signalGetFn","signalSetFn","signalValueChanged","signalUpdateFn","updater","runPostSignalSetFn","_postSignalSetFn","_postSignalSetFn2","createWatch","schedule","allowSignalWrites","WATCH_NODE","registerOnCleanup","cleanupFn","isWatchNodeDestroyed","destroyWatchNode","NOOP_CLEANUP_FN","run","hasRun","ref","notify","cleanup","destroy","setAlternateWeakRefImpl","impl"],"sources":["D:/Repositorios Oficial/Aplicacion-Movil/APP-Mov/discoverify/node_modules/@angular/core/fesm2022/primitives/signals.mjs"],"sourcesContent":["/**\n * @license Angular v18.2.9\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\n/**\n * The default equality function used for `signal` and `computed`, which uses referential equality.\n */\nfunction defaultEquals(a, b) {\n    return Object.is(a, b);\n}\n\n/**\n * The currently active consumer `ReactiveNode`, if running code in a reactive context.\n *\n * Change this via `setActiveConsumer`.\n */\nlet activeConsumer = null;\nlet inNotificationPhase = false;\n/**\n * Global epoch counter. Incremented whenever a source signal is set.\n */\nlet epoch = 1;\n/**\n * Symbol used to tell `Signal`s apart from other functions.\n *\n * This can be used to auto-unwrap signals in various cases, or to auto-wrap non-signal values.\n */\nconst SIGNAL = /* @__PURE__ */ Symbol('SIGNAL');\nfunction setActiveConsumer(consumer) {\n    const prev = activeConsumer;\n    activeConsumer = consumer;\n    return prev;\n}\nfunction getActiveConsumer() {\n    return activeConsumer;\n}\nfunction isInNotificationPhase() {\n    return inNotificationPhase;\n}\nfunction isReactive(value) {\n    return value[SIGNAL] !== undefined;\n}\nconst REACTIVE_NODE = {\n    version: 0,\n    lastCleanEpoch: 0,\n    dirty: false,\n    producerNode: undefined,\n    producerLastReadVersion: undefined,\n    producerIndexOfThis: undefined,\n    nextProducerIndex: 0,\n    liveConsumerNode: undefined,\n    liveConsumerIndexOfThis: undefined,\n    consumerAllowSignalWrites: false,\n    consumerIsAlwaysLive: false,\n    producerMustRecompute: () => false,\n    producerRecomputeValue: () => { },\n    consumerMarkedDirty: () => { },\n    consumerOnSignalRead: () => { },\n};\n/**\n * Called by implementations when a producer's signal is read.\n */\nfunction producerAccessed(node) {\n    if (inNotificationPhase) {\n        throw new Error(typeof ngDevMode !== 'undefined' && ngDevMode\n            ? `Assertion error: signal read during notification phase`\n            : '');\n    }\n    if (activeConsumer === null) {\n        // Accessed outside of a reactive context, so nothing to record.\n        return;\n    }\n    activeConsumer.consumerOnSignalRead(node);\n    // This producer is the `idx`th dependency of `activeConsumer`.\n    const idx = activeConsumer.nextProducerIndex++;\n    assertConsumerNode(activeConsumer);\n    if (idx < activeConsumer.producerNode.length && activeConsumer.producerNode[idx] !== node) {\n        // There's been a change in producers since the last execution of `activeConsumer`.\n        // `activeConsumer.producerNode[idx]` holds a stale dependency which will be be removed and\n        // replaced with `this`.\n        //\n        // If `activeConsumer` isn't live, then this is a no-op, since we can replace the producer in\n        // `activeConsumer.producerNode` directly. However, if `activeConsumer` is live, then we need\n        // to remove it from the stale producer's `liveConsumer`s.\n        if (consumerIsLive(activeConsumer)) {\n            const staleProducer = activeConsumer.producerNode[idx];\n            producerRemoveLiveConsumerAtIndex(staleProducer, activeConsumer.producerIndexOfThis[idx]);\n            // At this point, the only record of `staleProducer` is the reference at\n            // `activeConsumer.producerNode[idx]` which will be overwritten below.\n        }\n    }\n    if (activeConsumer.producerNode[idx] !== node) {\n        // We're a new dependency of the consumer (at `idx`).\n        activeConsumer.producerNode[idx] = node;\n        // If the active consumer is live, then add it as a live consumer. If not, then use 0 as a\n        // placeholder value.\n        activeConsumer.producerIndexOfThis[idx] = consumerIsLive(activeConsumer)\n            ? producerAddLiveConsumer(node, activeConsumer, idx)\n            : 0;\n    }\n    activeConsumer.producerLastReadVersion[idx] = node.version;\n}\n/**\n * Increment the global epoch counter.\n *\n * Called by source producers (that is, not computeds) whenever their values change.\n */\nfunction producerIncrementEpoch() {\n    epoch++;\n}\n/**\n * Ensure this producer's `version` is up-to-date.\n */\nfunction producerUpdateValueVersion(node) {\n    if (consumerIsLive(node) && !node.dirty) {\n        // A live consumer will be marked dirty by producers, so a clean state means that its version\n        // is guaranteed to be up-to-date.\n        return;\n    }\n    if (!node.dirty && node.lastCleanEpoch === epoch) {\n        // Even non-live consumers can skip polling if they previously found themselves to be clean at\n        // the current epoch, since their dependencies could not possibly have changed (such a change\n        // would've increased the epoch).\n        return;\n    }\n    if (!node.producerMustRecompute(node) && !consumerPollProducersForChange(node)) {\n        // None of our producers report a change since the last time they were read, so no\n        // recomputation of our value is necessary, and we can consider ourselves clean.\n        node.dirty = false;\n        node.lastCleanEpoch = epoch;\n        return;\n    }\n    node.producerRecomputeValue(node);\n    // After recomputing the value, we're no longer dirty.\n    node.dirty = false;\n    node.lastCleanEpoch = epoch;\n}\n/**\n * Propagate a dirty notification to live consumers of this producer.\n */\nfunction producerNotifyConsumers(node) {\n    if (node.liveConsumerNode === undefined) {\n        return;\n    }\n    // Prevent signal reads when we're updating the graph\n    const prev = inNotificationPhase;\n    inNotificationPhase = true;\n    try {\n        for (const consumer of node.liveConsumerNode) {\n            if (!consumer.dirty) {\n                consumerMarkDirty(consumer);\n            }\n        }\n    }\n    finally {\n        inNotificationPhase = prev;\n    }\n}\n/**\n * Whether this `ReactiveNode` in its producer capacity is currently allowed to initiate updates,\n * based on the current consumer context.\n */\nfunction producerUpdatesAllowed() {\n    return activeConsumer?.consumerAllowSignalWrites !== false;\n}\nfunction consumerMarkDirty(node) {\n    node.dirty = true;\n    producerNotifyConsumers(node);\n    node.consumerMarkedDirty?.(node);\n}\n/**\n * Prepare this consumer to run a computation in its reactive context.\n *\n * Must be called by subclasses which represent reactive computations, before those computations\n * begin.\n */\nfunction consumerBeforeComputation(node) {\n    node && (node.nextProducerIndex = 0);\n    return setActiveConsumer(node);\n}\n/**\n * Finalize this consumer's state after a reactive computation has run.\n *\n * Must be called by subclasses which represent reactive computations, after those computations\n * have finished.\n */\nfunction consumerAfterComputation(node, prevConsumer) {\n    setActiveConsumer(prevConsumer);\n    if (!node ||\n        node.producerNode === undefined ||\n        node.producerIndexOfThis === undefined ||\n        node.producerLastReadVersion === undefined) {\n        return;\n    }\n    if (consumerIsLive(node)) {\n        // For live consumers, we need to remove the producer -> consumer edge for any stale producers\n        // which weren't dependencies after the recomputation.\n        for (let i = node.nextProducerIndex; i < node.producerNode.length; i++) {\n            producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);\n        }\n    }\n    // Truncate the producer tracking arrays.\n    // Perf note: this is essentially truncating the length to `node.nextProducerIndex`, but\n    // benchmarking has shown that individual pop operations are faster.\n    while (node.producerNode.length > node.nextProducerIndex) {\n        node.producerNode.pop();\n        node.producerLastReadVersion.pop();\n        node.producerIndexOfThis.pop();\n    }\n}\n/**\n * Determine whether this consumer has any dependencies which have changed since the last time\n * they were read.\n */\nfunction consumerPollProducersForChange(node) {\n    assertConsumerNode(node);\n    // Poll producers for change.\n    for (let i = 0; i < node.producerNode.length; i++) {\n        const producer = node.producerNode[i];\n        const seenVersion = node.producerLastReadVersion[i];\n        // First check the versions. A mismatch means that the producer's value is known to have\n        // changed since the last time we read it.\n        if (seenVersion !== producer.version) {\n            return true;\n        }\n        // The producer's version is the same as the last time we read it, but it might itself be\n        // stale. Force the producer to recompute its version (calculating a new value if necessary).\n        producerUpdateValueVersion(producer);\n        // Now when we do this check, `producer.version` is guaranteed to be up to date, so if the\n        // versions still match then it has not changed since the last time we read it.\n        if (seenVersion !== producer.version) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Disconnect this consumer from the graph.\n */\nfunction consumerDestroy(node) {\n    assertConsumerNode(node);\n    if (consumerIsLive(node)) {\n        // Drop all connections from the graph to this node.\n        for (let i = 0; i < node.producerNode.length; i++) {\n            producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);\n        }\n    }\n    // Truncate all the arrays to drop all connection from this node to the graph.\n    node.producerNode.length =\n        node.producerLastReadVersion.length =\n            node.producerIndexOfThis.length =\n                0;\n    if (node.liveConsumerNode) {\n        node.liveConsumerNode.length = node.liveConsumerIndexOfThis.length = 0;\n    }\n}\n/**\n * Add `consumer` as a live consumer of this node.\n *\n * Note that this operation is potentially transitive. If this node becomes live, then it becomes\n * a live consumer of all of its current producers.\n */\nfunction producerAddLiveConsumer(node, consumer, indexOfThis) {\n    assertProducerNode(node);\n    if (node.liveConsumerNode.length === 0 && isConsumerNode(node)) {\n        // When going from 0 to 1 live consumers, we become a live consumer to our producers.\n        for (let i = 0; i < node.producerNode.length; i++) {\n            node.producerIndexOfThis[i] = producerAddLiveConsumer(node.producerNode[i], node, i);\n        }\n    }\n    node.liveConsumerIndexOfThis.push(indexOfThis);\n    return node.liveConsumerNode.push(consumer) - 1;\n}\n/**\n * Remove the live consumer at `idx`.\n */\nfunction producerRemoveLiveConsumerAtIndex(node, idx) {\n    assertProducerNode(node);\n    if (typeof ngDevMode !== 'undefined' && ngDevMode && idx >= node.liveConsumerNode.length) {\n        throw new Error(`Assertion error: active consumer index ${idx} is out of bounds of ${node.liveConsumerNode.length} consumers)`);\n    }\n    if (node.liveConsumerNode.length === 1 && isConsumerNode(node)) {\n        // When removing the last live consumer, we will no longer be live. We need to remove\n        // ourselves from our producers' tracking (which may cause consumer-producers to lose\n        // liveness as well).\n        for (let i = 0; i < node.producerNode.length; i++) {\n            producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);\n        }\n    }\n    // Move the last value of `liveConsumers` into `idx`. Note that if there's only a single\n    // live consumer, this is a no-op.\n    const lastIdx = node.liveConsumerNode.length - 1;\n    node.liveConsumerNode[idx] = node.liveConsumerNode[lastIdx];\n    node.liveConsumerIndexOfThis[idx] = node.liveConsumerIndexOfThis[lastIdx];\n    // Truncate the array.\n    node.liveConsumerNode.length--;\n    node.liveConsumerIndexOfThis.length--;\n    // If the index is still valid, then we need to fix the index pointer from the producer to this\n    // consumer, and update it from `lastIdx` to `idx` (accounting for the move above).\n    if (idx < node.liveConsumerNode.length) {\n        const idxProducer = node.liveConsumerIndexOfThis[idx];\n        const consumer = node.liveConsumerNode[idx];\n        assertConsumerNode(consumer);\n        consumer.producerIndexOfThis[idxProducer] = idx;\n    }\n}\nfunction consumerIsLive(node) {\n    return node.consumerIsAlwaysLive || (node?.liveConsumerNode?.length ?? 0) > 0;\n}\nfunction assertConsumerNode(node) {\n    node.producerNode ??= [];\n    node.producerIndexOfThis ??= [];\n    node.producerLastReadVersion ??= [];\n}\nfunction assertProducerNode(node) {\n    node.liveConsumerNode ??= [];\n    node.liveConsumerIndexOfThis ??= [];\n}\nfunction isConsumerNode(node) {\n    return node.producerNode !== undefined;\n}\n\n/**\n * Create a computed signal which derives a reactive value from an expression.\n */\nfunction createComputed(computation) {\n    const node = Object.create(COMPUTED_NODE);\n    node.computation = computation;\n    const computed = () => {\n        // Check if the value needs updating before returning it.\n        producerUpdateValueVersion(node);\n        // Record that someone looked at this signal.\n        producerAccessed(node);\n        if (node.value === ERRORED) {\n            throw node.error;\n        }\n        return node.value;\n    };\n    computed[SIGNAL] = node;\n    return computed;\n}\n/**\n * A dedicated symbol used before a computed value has been calculated for the first time.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nconst UNSET = /* @__PURE__ */ Symbol('UNSET');\n/**\n * A dedicated symbol used in place of a computed signal value to indicate that a given computation\n * is in progress. Used to detect cycles in computation chains.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nconst COMPUTING = /* @__PURE__ */ Symbol('COMPUTING');\n/**\n * A dedicated symbol used in place of a computed signal value to indicate that a given computation\n * failed. The thrown error is cached until the computation gets dirty again.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nconst ERRORED = /* @__PURE__ */ Symbol('ERRORED');\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst COMPUTED_NODE = /* @__PURE__ */ (() => {\n    return {\n        ...REACTIVE_NODE,\n        value: UNSET,\n        dirty: true,\n        error: null,\n        equal: defaultEquals,\n        producerMustRecompute(node) {\n            // Force a recomputation if there's no current value, or if the current value is in the\n            // process of being calculated (which should throw an error).\n            return node.value === UNSET || node.value === COMPUTING;\n        },\n        producerRecomputeValue(node) {\n            if (node.value === COMPUTING) {\n                // Our computation somehow led to a cyclic read of itself.\n                throw new Error('Detected cycle in computations.');\n            }\n            const oldValue = node.value;\n            node.value = COMPUTING;\n            const prevConsumer = consumerBeforeComputation(node);\n            let newValue;\n            try {\n                newValue = node.computation();\n            }\n            catch (err) {\n                newValue = ERRORED;\n                node.error = err;\n            }\n            finally {\n                consumerAfterComputation(node, prevConsumer);\n            }\n            if (oldValue !== UNSET &&\n                oldValue !== ERRORED &&\n                newValue !== ERRORED &&\n                node.equal(oldValue, newValue)) {\n                // No change to `valueVersion` - old and new values are\n                // semantically equivalent.\n                node.value = oldValue;\n                return;\n            }\n            node.value = newValue;\n            node.version++;\n        },\n    };\n})();\n\nfunction defaultThrowError() {\n    throw new Error();\n}\nlet throwInvalidWriteToSignalErrorFn = defaultThrowError;\nfunction throwInvalidWriteToSignalError() {\n    throwInvalidWriteToSignalErrorFn();\n}\nfunction setThrowInvalidWriteToSignalError(fn) {\n    throwInvalidWriteToSignalErrorFn = fn;\n}\n\n/**\n * If set, called after `WritableSignal`s are updated.\n *\n * This hook can be used to achieve various effects, such as running effects synchronously as part\n * of setting a signal.\n */\nlet postSignalSetFn = null;\n/**\n * Create a `Signal` that can be set or updated directly.\n */\nfunction createSignal(initialValue) {\n    const node = Object.create(SIGNAL_NODE);\n    node.value = initialValue;\n    const getter = (() => {\n        producerAccessed(node);\n        return node.value;\n    });\n    getter[SIGNAL] = node;\n    return getter;\n}\nfunction setPostSignalSetFn(fn) {\n    const prev = postSignalSetFn;\n    postSignalSetFn = fn;\n    return prev;\n}\nfunction signalGetFn() {\n    producerAccessed(this);\n    return this.value;\n}\nfunction signalSetFn(node, newValue) {\n    if (!producerUpdatesAllowed()) {\n        throwInvalidWriteToSignalError();\n    }\n    if (!node.equal(node.value, newValue)) {\n        node.value = newValue;\n        signalValueChanged(node);\n    }\n}\nfunction signalUpdateFn(node, updater) {\n    if (!producerUpdatesAllowed()) {\n        throwInvalidWriteToSignalError();\n    }\n    signalSetFn(node, updater(node.value));\n}\nfunction runPostSignalSetFn() {\n    postSignalSetFn?.();\n}\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst SIGNAL_NODE = /* @__PURE__ */ (() => {\n    return {\n        ...REACTIVE_NODE,\n        equal: defaultEquals,\n        value: undefined,\n    };\n})();\nfunction signalValueChanged(node) {\n    node.version++;\n    producerIncrementEpoch();\n    producerNotifyConsumers(node);\n    postSignalSetFn?.();\n}\n\nfunction createWatch(fn, schedule, allowSignalWrites) {\n    const node = Object.create(WATCH_NODE);\n    if (allowSignalWrites) {\n        node.consumerAllowSignalWrites = true;\n    }\n    node.fn = fn;\n    node.schedule = schedule;\n    const registerOnCleanup = (cleanupFn) => {\n        node.cleanupFn = cleanupFn;\n    };\n    function isWatchNodeDestroyed(node) {\n        return node.fn === null && node.schedule === null;\n    }\n    function destroyWatchNode(node) {\n        if (!isWatchNodeDestroyed(node)) {\n            consumerDestroy(node); // disconnect watcher from the reactive graph\n            node.cleanupFn();\n            // nullify references to the integration functions to mark node as destroyed\n            node.fn = null;\n            node.schedule = null;\n            node.cleanupFn = NOOP_CLEANUP_FN;\n        }\n    }\n    const run = () => {\n        if (node.fn === null) {\n            // trying to run a destroyed watch is noop\n            return;\n        }\n        if (isInNotificationPhase()) {\n            throw new Error(`Schedulers cannot synchronously execute watches while scheduling.`);\n        }\n        node.dirty = false;\n        if (node.hasRun && !consumerPollProducersForChange(node)) {\n            return;\n        }\n        node.hasRun = true;\n        const prevConsumer = consumerBeforeComputation(node);\n        try {\n            node.cleanupFn();\n            node.cleanupFn = NOOP_CLEANUP_FN;\n            node.fn(registerOnCleanup);\n        }\n        finally {\n            consumerAfterComputation(node, prevConsumer);\n        }\n    };\n    node.ref = {\n        notify: () => consumerMarkDirty(node),\n        run,\n        cleanup: () => node.cleanupFn(),\n        destroy: () => destroyWatchNode(node),\n        [SIGNAL]: node,\n    };\n    return node.ref;\n}\nconst NOOP_CLEANUP_FN = () => { };\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst WATCH_NODE = /* @__PURE__ */ (() => {\n    return {\n        ...REACTIVE_NODE,\n        consumerIsAlwaysLive: true,\n        consumerAllowSignalWrites: false,\n        consumerMarkedDirty: (node) => {\n            if (node.schedule !== null) {\n                node.schedule(node.ref);\n            }\n        },\n        hasRun: false,\n        cleanupFn: NOOP_CLEANUP_FN,\n    };\n})();\n\nfunction setAlternateWeakRefImpl(impl) {\n    // TODO: remove this function\n}\n\nexport { REACTIVE_NODE, SIGNAL, SIGNAL_NODE, consumerAfterComputation, consumerBeforeComputation, consumerDestroy, consumerMarkDirty, consumerPollProducersForChange, createComputed, createSignal, createWatch, defaultEquals, getActiveConsumer, isInNotificationPhase, isReactive, producerAccessed, producerIncrementEpoch, producerNotifyConsumers, producerUpdateValueVersion, producerUpdatesAllowed, runPostSignalSetFn, setActiveConsumer, setAlternateWeakRefImpl, setPostSignalSetFn, setThrowInvalidWriteToSignalError, signalSetFn, signalUpdateFn };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAASA,aAAaA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACzB,OAAOC,MAAM,CAACC,EAAE,CAACH,CAAC,EAAEC,CAAC,CAAC;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAIG,cAAc,GAAG,IAAI;AACzB,IAAIC,mBAAmB,GAAG,KAAK;AAC/B;AACA;AACA;AACA,IAAIC,KAAK,GAAG,CAAC;AACb;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,eAAgBC,MAAM,CAAC,QAAQ,CAAC;AAC/C,SAASC,iBAAiBA,CAACC,QAAQ,EAAE;EACjC,MAAMC,IAAI,GAAGP,cAAc;EAC3BA,cAAc,GAAGM,QAAQ;EACzB,OAAOC,IAAI;AACf;AACA,SAASC,iBAAiBA,CAAA,EAAG;EACzB,OAAOR,cAAc;AACzB;AACA,SAASS,qBAAqBA,CAAA,EAAG;EAC7B,OAAOR,mBAAmB;AAC9B;AACA,SAASS,UAAUA,CAACC,KAAK,EAAE;EACvB,OAAOA,KAAK,CAACR,MAAM,CAAC,KAAKS,SAAS;AACtC;AACA,MAAMC,aAAa,GAAG;EAClBC,OAAO,EAAE,CAAC;EACVC,cAAc,EAAE,CAAC;EACjBC,KAAK,EAAE,KAAK;EACZC,YAAY,EAAEL,SAAS;EACvBM,uBAAuB,EAAEN,SAAS;EAClCO,mBAAmB,EAAEP,SAAS;EAC9BQ,iBAAiB,EAAE,CAAC;EACpBC,gBAAgB,EAAET,SAAS;EAC3BU,uBAAuB,EAAEV,SAAS;EAClCW,yBAAyB,EAAE,KAAK;EAChCC,oBAAoB,EAAE,KAAK;EAC3BC,qBAAqB,EAAEA,CAAA,KAAM,KAAK;EAClCC,sBAAsB,EAAEA,CAAA,KAAM,CAAE,CAAC;EACjCC,mBAAmB,EAAEA,CAAA,KAAM,CAAE,CAAC;EAC9BC,oBAAoB,EAAEA,CAAA,KAAM,CAAE;AAClC,CAAC;AACD;AACA;AACA;AACA,SAASC,gBAAgBA,CAACC,IAAI,EAAE;EAC5B,IAAI7B,mBAAmB,EAAE;IACrB,MAAM,IAAI8B,KAAK,CAAC,OAAOC,SAAS,KAAK,WAAW,IAAIA,SAAS,GACvD,wDAAwD,GACxD,EAAE,CAAC;EACb;EACA,IAAIhC,cAAc,KAAK,IAAI,EAAE;IACzB;IACA;EACJ;EACAA,cAAc,CAAC4B,oBAAoB,CAACE,IAAI,CAAC;EACzC;EACA,MAAMG,GAAG,GAAGjC,cAAc,CAACoB,iBAAiB,EAAE;EAC9Cc,kBAAkB,CAAClC,cAAc,CAAC;EAClC,IAAIiC,GAAG,GAAGjC,cAAc,CAACiB,YAAY,CAACkB,MAAM,IAAInC,cAAc,CAACiB,YAAY,CAACgB,GAAG,CAAC,KAAKH,IAAI,EAAE;IACvF;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAIM,cAAc,CAACpC,cAAc,CAAC,EAAE;MAChC,MAAMqC,aAAa,GAAGrC,cAAc,CAACiB,YAAY,CAACgB,GAAG,CAAC;MACtDK,iCAAiC,CAACD,aAAa,EAAErC,cAAc,CAACmB,mBAAmB,CAACc,GAAG,CAAC,CAAC;MACzF;MACA;IACJ;EACJ;EACA,IAAIjC,cAAc,CAACiB,YAAY,CAACgB,GAAG,CAAC,KAAKH,IAAI,EAAE;IAC3C;IACA9B,cAAc,CAACiB,YAAY,CAACgB,GAAG,CAAC,GAAGH,IAAI;IACvC;IACA;IACA9B,cAAc,CAACmB,mBAAmB,CAACc,GAAG,CAAC,GAAGG,cAAc,CAACpC,cAAc,CAAC,GAClEuC,uBAAuB,CAACT,IAAI,EAAE9B,cAAc,EAAEiC,GAAG,CAAC,GAClD,CAAC;EACX;EACAjC,cAAc,CAACkB,uBAAuB,CAACe,GAAG,CAAC,GAAGH,IAAI,CAAChB,OAAO;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0B,sBAAsBA,CAAA,EAAG;EAC9BtC,KAAK,EAAE;AACX;AACA;AACA;AACA;AACA,SAASuC,0BAA0BA,CAACX,IAAI,EAAE;EACtC,IAAIM,cAAc,CAACN,IAAI,CAAC,IAAI,CAACA,IAAI,CAACd,KAAK,EAAE;IACrC;IACA;IACA;EACJ;EACA,IAAI,CAACc,IAAI,CAACd,KAAK,IAAIc,IAAI,CAACf,cAAc,KAAKb,KAAK,EAAE;IAC9C;IACA;IACA;IACA;EACJ;EACA,IAAI,CAAC4B,IAAI,CAACL,qBAAqB,CAACK,IAAI,CAAC,IAAI,CAACY,8BAA8B,CAACZ,IAAI,CAAC,EAAE;IAC5E;IACA;IACAA,IAAI,CAACd,KAAK,GAAG,KAAK;IAClBc,IAAI,CAACf,cAAc,GAAGb,KAAK;IAC3B;EACJ;EACA4B,IAAI,CAACJ,sBAAsB,CAACI,IAAI,CAAC;EACjC;EACAA,IAAI,CAACd,KAAK,GAAG,KAAK;EAClBc,IAAI,CAACf,cAAc,GAAGb,KAAK;AAC/B;AACA;AACA;AACA;AACA,SAASyC,uBAAuBA,CAACb,IAAI,EAAE;EACnC,IAAIA,IAAI,CAACT,gBAAgB,KAAKT,SAAS,EAAE;IACrC;EACJ;EACA;EACA,MAAML,IAAI,GAAGN,mBAAmB;EAChCA,mBAAmB,GAAG,IAAI;EAC1B,IAAI;IACA,KAAK,MAAMK,QAAQ,IAAIwB,IAAI,CAACT,gBAAgB,EAAE;MAC1C,IAAI,CAACf,QAAQ,CAACU,KAAK,EAAE;QACjB4B,iBAAiB,CAACtC,QAAQ,CAAC;MAC/B;IACJ;EACJ,CAAC,SACO;IACJL,mBAAmB,GAAGM,IAAI;EAC9B;AACJ;AACA;AACA;AACA;AACA;AACA,SAASsC,sBAAsBA,CAAA,EAAG;EAAA,IAAAC,eAAA;EAC9B,OAAO,EAAAA,eAAA,GAAA9C,cAAc,cAAA8C,eAAA,uBAAdA,eAAA,CAAgBvB,yBAAyB,MAAK,KAAK;AAC9D;AACA,SAASqB,iBAAiBA,CAACd,IAAI,EAAE;EAAA,IAAAiB,qBAAA;EAC7BjB,IAAI,CAACd,KAAK,GAAG,IAAI;EACjB2B,uBAAuB,CAACb,IAAI,CAAC;EAC7B,CAAAiB,qBAAA,GAAAjB,IAAI,CAACH,mBAAmB,cAAAoB,qBAAA,eAAxBA,qBAAA,CAAAC,IAAA,CAAAlB,IAAI,EAAuBA,IAAI,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmB,yBAAyBA,CAACnB,IAAI,EAAE;EACrCA,IAAI,KAAKA,IAAI,CAACV,iBAAiB,GAAG,CAAC,CAAC;EACpC,OAAOf,iBAAiB,CAACyB,IAAI,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoB,wBAAwBA,CAACpB,IAAI,EAAEqB,YAAY,EAAE;EAClD9C,iBAAiB,CAAC8C,YAAY,CAAC;EAC/B,IAAI,CAACrB,IAAI,IACLA,IAAI,CAACb,YAAY,KAAKL,SAAS,IAC/BkB,IAAI,CAACX,mBAAmB,KAAKP,SAAS,IACtCkB,IAAI,CAACZ,uBAAuB,KAAKN,SAAS,EAAE;IAC5C;EACJ;EACA,IAAIwB,cAAc,CAACN,IAAI,CAAC,EAAE;IACtB;IACA;IACA,KAAK,IAAIsB,CAAC,GAAGtB,IAAI,CAACV,iBAAiB,EAAEgC,CAAC,GAAGtB,IAAI,CAACb,YAAY,CAACkB,MAAM,EAAEiB,CAAC,EAAE,EAAE;MACpEd,iCAAiC,CAACR,IAAI,CAACb,YAAY,CAACmC,CAAC,CAAC,EAAEtB,IAAI,CAACX,mBAAmB,CAACiC,CAAC,CAAC,CAAC;IACxF;EACJ;EACA;EACA;EACA;EACA,OAAOtB,IAAI,CAACb,YAAY,CAACkB,MAAM,GAAGL,IAAI,CAACV,iBAAiB,EAAE;IACtDU,IAAI,CAACb,YAAY,CAACoC,GAAG,CAAC,CAAC;IACvBvB,IAAI,CAACZ,uBAAuB,CAACmC,GAAG,CAAC,CAAC;IAClCvB,IAAI,CAACX,mBAAmB,CAACkC,GAAG,CAAC,CAAC;EAClC;AACJ;AACA;AACA;AACA;AACA;AACA,SAASX,8BAA8BA,CAACZ,IAAI,EAAE;EAC1CI,kBAAkB,CAACJ,IAAI,CAAC;EACxB;EACA,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtB,IAAI,CAACb,YAAY,CAACkB,MAAM,EAAEiB,CAAC,EAAE,EAAE;IAC/C,MAAME,QAAQ,GAAGxB,IAAI,CAACb,YAAY,CAACmC,CAAC,CAAC;IACrC,MAAMG,WAAW,GAAGzB,IAAI,CAACZ,uBAAuB,CAACkC,CAAC,CAAC;IACnD;IACA;IACA,IAAIG,WAAW,KAAKD,QAAQ,CAACxC,OAAO,EAAE;MAClC,OAAO,IAAI;IACf;IACA;IACA;IACA2B,0BAA0B,CAACa,QAAQ,CAAC;IACpC;IACA;IACA,IAAIC,WAAW,KAAKD,QAAQ,CAACxC,OAAO,EAAE;MAClC,OAAO,IAAI;IACf;EACJ;EACA,OAAO,KAAK;AAChB;AACA;AACA;AACA;AACA,SAAS0C,eAAeA,CAAC1B,IAAI,EAAE;EAC3BI,kBAAkB,CAACJ,IAAI,CAAC;EACxB,IAAIM,cAAc,CAACN,IAAI,CAAC,EAAE;IACtB;IACA,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtB,IAAI,CAACb,YAAY,CAACkB,MAAM,EAAEiB,CAAC,EAAE,EAAE;MAC/Cd,iCAAiC,CAACR,IAAI,CAACb,YAAY,CAACmC,CAAC,CAAC,EAAEtB,IAAI,CAACX,mBAAmB,CAACiC,CAAC,CAAC,CAAC;IACxF;EACJ;EACA;EACAtB,IAAI,CAACb,YAAY,CAACkB,MAAM,GACpBL,IAAI,CAACZ,uBAAuB,CAACiB,MAAM,GAC/BL,IAAI,CAACX,mBAAmB,CAACgB,MAAM,GAC3B,CAAC;EACb,IAAIL,IAAI,CAACT,gBAAgB,EAAE;IACvBS,IAAI,CAACT,gBAAgB,CAACc,MAAM,GAAGL,IAAI,CAACR,uBAAuB,CAACa,MAAM,GAAG,CAAC;EAC1E;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,uBAAuBA,CAACT,IAAI,EAAExB,QAAQ,EAAEmD,WAAW,EAAE;EAC1DC,kBAAkB,CAAC5B,IAAI,CAAC;EACxB,IAAIA,IAAI,CAACT,gBAAgB,CAACc,MAAM,KAAK,CAAC,IAAIwB,cAAc,CAAC7B,IAAI,CAAC,EAAE;IAC5D;IACA,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtB,IAAI,CAACb,YAAY,CAACkB,MAAM,EAAEiB,CAAC,EAAE,EAAE;MAC/CtB,IAAI,CAACX,mBAAmB,CAACiC,CAAC,CAAC,GAAGb,uBAAuB,CAACT,IAAI,CAACb,YAAY,CAACmC,CAAC,CAAC,EAAEtB,IAAI,EAAEsB,CAAC,CAAC;IACxF;EACJ;EACAtB,IAAI,CAACR,uBAAuB,CAACsC,IAAI,CAACH,WAAW,CAAC;EAC9C,OAAO3B,IAAI,CAACT,gBAAgB,CAACuC,IAAI,CAACtD,QAAQ,CAAC,GAAG,CAAC;AACnD;AACA;AACA;AACA;AACA,SAASgC,iCAAiCA,CAACR,IAAI,EAAEG,GAAG,EAAE;EAClDyB,kBAAkB,CAAC5B,IAAI,CAAC;EACxB,IAAI,OAAOE,SAAS,KAAK,WAAW,IAAIA,SAAS,IAAIC,GAAG,IAAIH,IAAI,CAACT,gBAAgB,CAACc,MAAM,EAAE;IACtF,MAAM,IAAIJ,KAAK,CAAC,0CAA0CE,GAAG,wBAAwBH,IAAI,CAACT,gBAAgB,CAACc,MAAM,aAAa,CAAC;EACnI;EACA,IAAIL,IAAI,CAACT,gBAAgB,CAACc,MAAM,KAAK,CAAC,IAAIwB,cAAc,CAAC7B,IAAI,CAAC,EAAE;IAC5D;IACA;IACA;IACA,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtB,IAAI,CAACb,YAAY,CAACkB,MAAM,EAAEiB,CAAC,EAAE,EAAE;MAC/Cd,iCAAiC,CAACR,IAAI,CAACb,YAAY,CAACmC,CAAC,CAAC,EAAEtB,IAAI,CAACX,mBAAmB,CAACiC,CAAC,CAAC,CAAC;IACxF;EACJ;EACA;EACA;EACA,MAAMS,OAAO,GAAG/B,IAAI,CAACT,gBAAgB,CAACc,MAAM,GAAG,CAAC;EAChDL,IAAI,CAACT,gBAAgB,CAACY,GAAG,CAAC,GAAGH,IAAI,CAACT,gBAAgB,CAACwC,OAAO,CAAC;EAC3D/B,IAAI,CAACR,uBAAuB,CAACW,GAAG,CAAC,GAAGH,IAAI,CAACR,uBAAuB,CAACuC,OAAO,CAAC;EACzE;EACA/B,IAAI,CAACT,gBAAgB,CAACc,MAAM,EAAE;EAC9BL,IAAI,CAACR,uBAAuB,CAACa,MAAM,EAAE;EACrC;EACA;EACA,IAAIF,GAAG,GAAGH,IAAI,CAACT,gBAAgB,CAACc,MAAM,EAAE;IACpC,MAAM2B,WAAW,GAAGhC,IAAI,CAACR,uBAAuB,CAACW,GAAG,CAAC;IACrD,MAAM3B,QAAQ,GAAGwB,IAAI,CAACT,gBAAgB,CAACY,GAAG,CAAC;IAC3CC,kBAAkB,CAAC5B,QAAQ,CAAC;IAC5BA,QAAQ,CAACa,mBAAmB,CAAC2C,WAAW,CAAC,GAAG7B,GAAG;EACnD;AACJ;AACA,SAASG,cAAcA,CAACN,IAAI,EAAE;EAAA,IAAAiC,qBAAA,EAAAC,sBAAA;EAC1B,OAAOlC,IAAI,CAACN,oBAAoB,IAAI,EAAAuC,qBAAA,GAACjC,IAAI,aAAJA,IAAI,gBAAAkC,sBAAA,GAAJlC,IAAI,CAAET,gBAAgB,cAAA2C,sBAAA,uBAAtBA,sBAAA,CAAwB7B,MAAM,cAAA4B,qBAAA,cAAAA,qBAAA,GAAI,CAAC,IAAI,CAAC;AACjF;AACA,SAAS7B,kBAAkBA,CAACJ,IAAI,EAAE;EAAA,IAAAmC,kBAAA,EAAAC,qBAAA,EAAAC,qBAAA;EAC9B,CAAAF,kBAAA,GAAAnC,IAAI,CAACb,YAAY,cAAAgD,kBAAA,cAAAA,kBAAA,GAAjBnC,IAAI,CAACb,YAAY,GAAK,EAAE;EACxB,CAAAiD,qBAAA,GAAApC,IAAI,CAACX,mBAAmB,cAAA+C,qBAAA,cAAAA,qBAAA,GAAxBpC,IAAI,CAACX,mBAAmB,GAAK,EAAE;EAC/B,CAAAgD,qBAAA,GAAArC,IAAI,CAACZ,uBAAuB,cAAAiD,qBAAA,cAAAA,qBAAA,GAA5BrC,IAAI,CAACZ,uBAAuB,GAAK,EAAE;AACvC;AACA,SAASwC,kBAAkBA,CAAC5B,IAAI,EAAE;EAAA,IAAAsC,sBAAA,EAAAC,qBAAA;EAC9B,CAAAD,sBAAA,GAAAtC,IAAI,CAACT,gBAAgB,cAAA+C,sBAAA,cAAAA,sBAAA,GAArBtC,IAAI,CAACT,gBAAgB,GAAK,EAAE;EAC5B,CAAAgD,qBAAA,GAAAvC,IAAI,CAACR,uBAAuB,cAAA+C,qBAAA,cAAAA,qBAAA,GAA5BvC,IAAI,CAACR,uBAAuB,GAAK,EAAE;AACvC;AACA,SAASqC,cAAcA,CAAC7B,IAAI,EAAE;EAC1B,OAAOA,IAAI,CAACb,YAAY,KAAKL,SAAS;AAC1C;;AAEA;AACA;AACA;AACA,SAAS0D,cAAcA,CAACC,WAAW,EAAE;EACjC,MAAMzC,IAAI,GAAGhC,MAAM,CAAC0E,MAAM,CAACC,aAAa,CAAC;EACzC3C,IAAI,CAACyC,WAAW,GAAGA,WAAW;EAC9B,MAAMG,QAAQ,GAAGA,CAAA,KAAM;IACnB;IACAjC,0BAA0B,CAACX,IAAI,CAAC;IAChC;IACAD,gBAAgB,CAACC,IAAI,CAAC;IACtB,IAAIA,IAAI,CAACnB,KAAK,KAAKgE,OAAO,EAAE;MACxB,MAAM7C,IAAI,CAAC8C,KAAK;IACpB;IACA,OAAO9C,IAAI,CAACnB,KAAK;EACrB,CAAC;EACD+D,QAAQ,CAACvE,MAAM,CAAC,GAAG2B,IAAI;EACvB,OAAO4C,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA,MAAMG,KAAK,GAAG,eAAgBzE,MAAM,CAAC,OAAO,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA,MAAM0E,SAAS,GAAG,eAAgB1E,MAAM,CAAC,WAAW,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA,MAAMuE,OAAO,GAAG,eAAgBvE,MAAM,CAAC,SAAS,CAAC;AACjD;AACA;AACA;AACA,MAAMqE,aAAa,GAAG,eAAgB,CAAC,MAAM;EACzC,OAAO;IACH,GAAG5D,aAAa;IAChBF,KAAK,EAAEkE,KAAK;IACZ7D,KAAK,EAAE,IAAI;IACX4D,KAAK,EAAE,IAAI;IACXG,KAAK,EAAEpF,aAAa;IACpB8B,qBAAqBA,CAACK,IAAI,EAAE;MACxB;MACA;MACA,OAAOA,IAAI,CAACnB,KAAK,KAAKkE,KAAK,IAAI/C,IAAI,CAACnB,KAAK,KAAKmE,SAAS;IAC3D,CAAC;IACDpD,sBAAsBA,CAACI,IAAI,EAAE;MACzB,IAAIA,IAAI,CAACnB,KAAK,KAAKmE,SAAS,EAAE;QAC1B;QACA,MAAM,IAAI/C,KAAK,CAAC,iCAAiC,CAAC;MACtD;MACA,MAAMiD,QAAQ,GAAGlD,IAAI,CAACnB,KAAK;MAC3BmB,IAAI,CAACnB,KAAK,GAAGmE,SAAS;MACtB,MAAM3B,YAAY,GAAGF,yBAAyB,CAACnB,IAAI,CAAC;MACpD,IAAImD,QAAQ;MACZ,IAAI;QACAA,QAAQ,GAAGnD,IAAI,CAACyC,WAAW,CAAC,CAAC;MACjC,CAAC,CACD,OAAOW,GAAG,EAAE;QACRD,QAAQ,GAAGN,OAAO;QAClB7C,IAAI,CAAC8C,KAAK,GAAGM,GAAG;MACpB,CAAC,SACO;QACJhC,wBAAwB,CAACpB,IAAI,EAAEqB,YAAY,CAAC;MAChD;MACA,IAAI6B,QAAQ,KAAKH,KAAK,IAClBG,QAAQ,KAAKL,OAAO,IACpBM,QAAQ,KAAKN,OAAO,IACpB7C,IAAI,CAACiD,KAAK,CAACC,QAAQ,EAAEC,QAAQ,CAAC,EAAE;QAChC;QACA;QACAnD,IAAI,CAACnB,KAAK,GAAGqE,QAAQ;QACrB;MACJ;MACAlD,IAAI,CAACnB,KAAK,GAAGsE,QAAQ;MACrBnD,IAAI,CAAChB,OAAO,EAAE;IAClB;EACJ,CAAC;AACL,CAAC,EAAE,CAAC;AAEJ,SAASqE,iBAAiBA,CAAA,EAAG;EACzB,MAAM,IAAIpD,KAAK,CAAC,CAAC;AACrB;AACA,IAAIqD,gCAAgC,GAAGD,iBAAiB;AACxD,SAASE,8BAA8BA,CAAA,EAAG;EACtCD,gCAAgC,CAAC,CAAC;AACtC;AACA,SAASE,iCAAiCA,CAACC,EAAE,EAAE;EAC3CH,gCAAgC,GAAGG,EAAE;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,eAAe,GAAG,IAAI;AAC1B;AACA;AACA;AACA,SAASC,YAAYA,CAACC,YAAY,EAAE;EAChC,MAAM5D,IAAI,GAAGhC,MAAM,CAAC0E,MAAM,CAACmB,WAAW,CAAC;EACvC7D,IAAI,CAACnB,KAAK,GAAG+E,YAAY;EACzB,MAAME,MAAM,GAAIA,CAAA,KAAM;IAClB/D,gBAAgB,CAACC,IAAI,CAAC;IACtB,OAAOA,IAAI,CAACnB,KAAK;EACrB,CAAE;EACFiF,MAAM,CAACzF,MAAM,CAAC,GAAG2B,IAAI;EACrB,OAAO8D,MAAM;AACjB;AACA,SAASC,kBAAkBA,CAACN,EAAE,EAAE;EAC5B,MAAMhF,IAAI,GAAGiF,eAAe;EAC5BA,eAAe,GAAGD,EAAE;EACpB,OAAOhF,IAAI;AACf;AACA,SAASuF,WAAWA,CAAA,EAAG;EACnBjE,gBAAgB,CAAC,IAAI,CAAC;EACtB,OAAO,IAAI,CAAClB,KAAK;AACrB;AACA,SAASoF,WAAWA,CAACjE,IAAI,EAAEmD,QAAQ,EAAE;EACjC,IAAI,CAACpC,sBAAsB,CAAC,CAAC,EAAE;IAC3BwC,8BAA8B,CAAC,CAAC;EACpC;EACA,IAAI,CAACvD,IAAI,CAACiD,KAAK,CAACjD,IAAI,CAACnB,KAAK,EAAEsE,QAAQ,CAAC,EAAE;IACnCnD,IAAI,CAACnB,KAAK,GAAGsE,QAAQ;IACrBe,kBAAkB,CAAClE,IAAI,CAAC;EAC5B;AACJ;AACA,SAASmE,cAAcA,CAACnE,IAAI,EAAEoE,OAAO,EAAE;EACnC,IAAI,CAACrD,sBAAsB,CAAC,CAAC,EAAE;IAC3BwC,8BAA8B,CAAC,CAAC;EACpC;EACAU,WAAW,CAACjE,IAAI,EAAEoE,OAAO,CAACpE,IAAI,CAACnB,KAAK,CAAC,CAAC;AAC1C;AACA,SAASwF,kBAAkBA,CAAA,EAAG;EAAA,IAAAC,gBAAA;EAC1B,CAAAA,gBAAA,GAAAZ,eAAe,cAAAY,gBAAA,eAAfA,gBAAA,CAAkB,CAAC;AACvB;AACA;AACA;AACA;AACA,MAAMT,WAAW,GAAG,eAAgB,CAAC,MAAM;EACvC,OAAO;IACH,GAAG9E,aAAa;IAChBkE,KAAK,EAAEpF,aAAa;IACpBgB,KAAK,EAAEC;EACX,CAAC;AACL,CAAC,EAAE,CAAC;AACJ,SAASoF,kBAAkBA,CAAClE,IAAI,EAAE;EAAA,IAAAuE,iBAAA;EAC9BvE,IAAI,CAAChB,OAAO,EAAE;EACd0B,sBAAsB,CAAC,CAAC;EACxBG,uBAAuB,CAACb,IAAI,CAAC;EAC7B,CAAAuE,iBAAA,GAAAb,eAAe,cAAAa,iBAAA,eAAfA,iBAAA,CAAkB,CAAC;AACvB;AAEA,SAASC,WAAWA,CAACf,EAAE,EAAEgB,QAAQ,EAAEC,iBAAiB,EAAE;EAClD,MAAM1E,IAAI,GAAGhC,MAAM,CAAC0E,MAAM,CAACiC,UAAU,CAAC;EACtC,IAAID,iBAAiB,EAAE;IACnB1E,IAAI,CAACP,yBAAyB,GAAG,IAAI;EACzC;EACAO,IAAI,CAACyD,EAAE,GAAGA,EAAE;EACZzD,IAAI,CAACyE,QAAQ,GAAGA,QAAQ;EACxB,MAAMG,iBAAiB,GAAIC,SAAS,IAAK;IACrC7E,IAAI,CAAC6E,SAAS,GAAGA,SAAS;EAC9B,CAAC;EACD,SAASC,oBAAoBA,CAAC9E,IAAI,EAAE;IAChC,OAAOA,IAAI,CAACyD,EAAE,KAAK,IAAI,IAAIzD,IAAI,CAACyE,QAAQ,KAAK,IAAI;EACrD;EACA,SAASM,gBAAgBA,CAAC/E,IAAI,EAAE;IAC5B,IAAI,CAAC8E,oBAAoB,CAAC9E,IAAI,CAAC,EAAE;MAC7B0B,eAAe,CAAC1B,IAAI,CAAC,CAAC,CAAC;MACvBA,IAAI,CAAC6E,SAAS,CAAC,CAAC;MAChB;MACA7E,IAAI,CAACyD,EAAE,GAAG,IAAI;MACdzD,IAAI,CAACyE,QAAQ,GAAG,IAAI;MACpBzE,IAAI,CAAC6E,SAAS,GAAGG,eAAe;IACpC;EACJ;EACA,MAAMC,GAAG,GAAGA,CAAA,KAAM;IACd,IAAIjF,IAAI,CAACyD,EAAE,KAAK,IAAI,EAAE;MAClB;MACA;IACJ;IACA,IAAI9E,qBAAqB,CAAC,CAAC,EAAE;MACzB,MAAM,IAAIsB,KAAK,CAAC,mEAAmE,CAAC;IACxF;IACAD,IAAI,CAACd,KAAK,GAAG,KAAK;IAClB,IAAIc,IAAI,CAACkF,MAAM,IAAI,CAACtE,8BAA8B,CAACZ,IAAI,CAAC,EAAE;MACtD;IACJ;IACAA,IAAI,CAACkF,MAAM,GAAG,IAAI;IAClB,MAAM7D,YAAY,GAAGF,yBAAyB,CAACnB,IAAI,CAAC;IACpD,IAAI;MACAA,IAAI,CAAC6E,SAAS,CAAC,CAAC;MAChB7E,IAAI,CAAC6E,SAAS,GAAGG,eAAe;MAChChF,IAAI,CAACyD,EAAE,CAACmB,iBAAiB,CAAC;IAC9B,CAAC,SACO;MACJxD,wBAAwB,CAACpB,IAAI,EAAEqB,YAAY,CAAC;IAChD;EACJ,CAAC;EACDrB,IAAI,CAACmF,GAAG,GAAG;IACPC,MAAM,EAAEA,CAAA,KAAMtE,iBAAiB,CAACd,IAAI,CAAC;IACrCiF,GAAG;IACHI,OAAO,EAAEA,CAAA,KAAMrF,IAAI,CAAC6E,SAAS,CAAC,CAAC;IAC/BS,OAAO,EAAEA,CAAA,KAAMP,gBAAgB,CAAC/E,IAAI,CAAC;IACrC,CAAC3B,MAAM,GAAG2B;EACd,CAAC;EACD,OAAOA,IAAI,CAACmF,GAAG;AACnB;AACA,MAAMH,eAAe,GAAGA,CAAA,KAAM,CAAE,CAAC;AACjC;AACA;AACA;AACA,MAAML,UAAU,GAAG,eAAgB,CAAC,MAAM;EACtC,OAAO;IACH,GAAG5F,aAAa;IAChBW,oBAAoB,EAAE,IAAI;IAC1BD,yBAAyB,EAAE,KAAK;IAChCI,mBAAmB,EAAGG,IAAI,IAAK;MAC3B,IAAIA,IAAI,CAACyE,QAAQ,KAAK,IAAI,EAAE;QACxBzE,IAAI,CAACyE,QAAQ,CAACzE,IAAI,CAACmF,GAAG,CAAC;MAC3B;IACJ,CAAC;IACDD,MAAM,EAAE,KAAK;IACbL,SAAS,EAAEG;EACf,CAAC;AACL,CAAC,EAAE,CAAC;AAEJ,SAASO,uBAAuBA,CAACC,IAAI,EAAE;EACnC;AAAA;AAGJ,SAASzG,aAAa,EAAEV,MAAM,EAAEwF,WAAW,EAAEzC,wBAAwB,EAAED,yBAAyB,EAAEO,eAAe,EAAEZ,iBAAiB,EAAEF,8BAA8B,EAAE4B,cAAc,EAAEmB,YAAY,EAAEa,WAAW,EAAE3G,aAAa,EAAEa,iBAAiB,EAAEC,qBAAqB,EAAEC,UAAU,EAAEmB,gBAAgB,EAAEW,sBAAsB,EAAEG,uBAAuB,EAAEF,0BAA0B,EAAEI,sBAAsB,EAAEsD,kBAAkB,EAAE9F,iBAAiB,EAAEgH,uBAAuB,EAAExB,kBAAkB,EAAEP,iCAAiC,EAAES,WAAW,EAAEE,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}