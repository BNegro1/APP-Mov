{"ast":null,"code":"var _AuthGuard;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\n// UrlTree es un tipo de Angular que representa una URL o un árbol de URL\n// Por qué? Porque la función canActivate() puede devolver un booleano o un UrlTree\n// Si devuelve un booleano, la navegación se permite o se bloquea.\n// Investigar más, aunque con esto basta mietras (?)\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    // Explicación breve: si el usuario está autenticado, devuelve true; si no, redirige al usuario a la página de login\n    if (this.authService.isAuthenticated()) {\n      return true;\n    } else {\n      // Redirige al usuario a la página de login si no está autenticado\n      return this.router.createUrlTree(['/login']);\n    }\n  }\n}\n_AuthGuard = AuthGuard;\n_AuthGuard.ɵfac = function AuthGuard_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\n_AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _AuthGuard,\n  factory: _AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canActivate","route","state","isAuthenticated","createUrlTree","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["D:\\Repositorios Oficial\\Aplicacion-Movil\\APP-Mov\\discoverify\\src\\app\\services\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// UrlTree es un tipo de Angular que representa una URL o un árbol de URL\n// Por qué? Porque la función canActivate() puede devolver un booleano o un UrlTree\n// Si devuelve un booleano, la navegación se permite o se bloquea.\n\n// Investigar más, aunque con esto basta mietras (?)\n\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree { // Comprueba si el usuario está autenticado\n      // Explicación breve: si el usuario está autenticado, devuelve true; si no, redirige al usuario a la página de login\n    if (this.authService.isAuthenticated()) {\n      return true;\n    } else {\n      // Redirige al usuario a la página de login si no está autenticado\n      return this.router.createUrlTree(['/login']);\n    }\n  }\n}"],"mappings":";;;;AASA;AACA;AACA;AAEA;AAEA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAY;EAExEC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IACxB;IACF,IAAI,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE,EAAE;MACtC,OAAO,IAAI;IACb,CAAC,MAAM;MACL;MACA,OAAO,IAAI,CAACJ,MAAM,CAACK,aAAa,CAAC,CAAC,QAAQ,CAAC,CAAC;IAC9C;EACF;;aAbWR,SAAS;;mCAATA,UAAS,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAATd,UAAS;EAAAe,OAAA,EAATf,UAAS,CAAAgB,IAAA;EAAAC,UAAA,EATR;AAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}