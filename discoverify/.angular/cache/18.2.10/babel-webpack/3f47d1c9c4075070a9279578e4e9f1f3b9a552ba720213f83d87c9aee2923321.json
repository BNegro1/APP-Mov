{"ast":null,"code":"import _asyncToGenerator from \"D:/Repositorios Oficial/Aplicacion-Movil/APP-Mov/discoverify/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nlet DbService = class DbService {\n  constructor(toastController, sqlite, platform) {\n    this.toastController = toastController;\n    this.sqlite = sqlite;\n    this.platform = platform;\n    this.isDbReady = new BehaviorSubject(false);\n    this.listaUsuarios = new BehaviorSubject([]);\n    this.likesCount = new BehaviorSubject(0);\n    this.crearBD();\n  }\n  crearBD() {\n    this.platform.ready().then(() => {\n      this.sqlite.create({\n        name: 'discoverify.db',\n        location: 'default'\n      }).then(db => {\n        this.database = db;\n        this.presentToast(\"Base de datos creada.\");\n        this.crearTablas();\n      }).catch(e => this.presentToast(`Error al crear BD: ${e}`)); // Mostrar mensaje de error si falla la creaci칩n de la base de datos\n    });\n  }\n  crearTablas() {\n    const query = `\n      CREATE TABLE IF NOT EXISTS usuarios (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        email TEXT NOT NULL,\n        password TEXT NOT NULL,\n        nombreUsuario TEXT NOT NULL\n      );\n      CREATE TABLE IF NOT EXISTS likes (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        userId INTEGER,\n        albumId TEXT,\n        FOREIGN KEY (userId) REFERENCES usuarios(id)\n      );\n    `;\n    this.database.executeSql(query, []).then(() => {\n      this.cargarUsuarios();\n      this.isDbReady.next(true);\n    }).catch(e => this.presentToast(`Error creando tablas: ${e}`)); // Mostrar mensaje de error si falla la creaci칩n de tablas\n  }\n  // Cargar usuarios de la tabla\n  cargarUsuarios() {\n    const query = 'SELECT * FROM usuarios';\n    this.database.executeSql(query, []).then(res => {\n      const usuarios = [];\n      for (let i = 0; i < res.rows.length; i++) {\n        usuarios.push(res.rows.item(i));\n      }\n      this.listaUsuarios.next(usuarios); // Actualizar la lista de usuarios\n    });\n  }\n  // A침adir un nuevo usuario\n  addUser(email, password, nombreUsuario) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const data = [email, password, nombreUsuario];\n      yield _this.database.executeSql('INSERT INTO usuarios (email, password, nombreUsuario) VALUES (?, ?, ?)', data); // Insertar usuario en la base de datos, \n      //el significado de \"VALUES (?, ?, ?)\" es que se insertar치n los valores de las variables data en el orden en que se encuentran.\n      _this.cargarUsuarios();\n      _this.presentToast('Usuario agregado');\n    })();\n  }\n  // Validar si el usuario existe en la base de datos\n  validateUser(email, password) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const data = [email, password];\n      const res = yield _this2.database.executeSql('SELECT * FROM usuarios WHERE email = ? AND password = ?', data); // data es un array que contiene los valores de email y password\n      if (res.rows.length > 0) {\n        const user = res.rows.item(0);\n        _this2.presentToast(`Bienvenido/a 游뱁! ${user.nombreUsuario}`);\n        return true;\n      }\n      return false;\n    })();\n  }\n  // Comprobar si el correo ya existe\n  userExists(email) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const res = yield _this3.database.executeSql('SELECT * FROM usuarios WHERE email = ?', [email]);\n      return res.rows.length > 0;\n    })();\n  }\n  // Actualizar datos del usuario\n  updateUser(id, email, password, nombreUsuario) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const data = [email, password, nombreUsuario, id];\n      yield _this4.database.executeSql('UPDATE usuarios SET email = ?, password = ?, nombreUsuario = ? WHERE id = ?', data);\n      _this4.cargarUsuarios();\n      _this4.presentToast('Usuario actualizado');\n    })();\n  }\n  // M칠todo para actualizar la contrase침a de un usuario por correo\n  updateUserPassword(email, newPassword) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const data = [newPassword, email];\n      yield _this5.database.executeSql('UPDATE usuarios SET password = ? WHERE email = ?', data);\n    })();\n  }\n  // Dar like a un 치lbum\n  likeAlbum(userId, albumId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const data = [userId, albumId];\n      yield _this6.database.executeSql('INSERT INTO likes (userId, albumId) VALUES (?, ?)', data);\n      _this6.updateLikesCount(userId);\n    })();\n  }\n  // Dar dislike a un 치lbum\n  dislikeAlbum(userId, albumId) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      yield _this7.database.executeSql('DELETE FROM likes WHERE userId = ? AND albumId = ?', [userId, albumId]);\n      _this7.updateLikesCount(userId);\n    })();\n  }\n  // Obtener 치lbumes con \"like\"\n  getLikedAlbums(userId) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const data = [userId];\n      const res = yield _this8.database.executeSql('SELECT albumId FROM likes WHERE userId = ?', data);\n      const likedAlbums = [];\n      for (let i = 0; i < res.rows.length; i++) {\n        likedAlbums.push(res.rows.item(i).albumId);\n      }\n      return likedAlbums;\n    })();\n  }\n  // Actualizar contador de likes\n  updateLikesCount(userId) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const likedAlbums = yield _this9.getLikedAlbums(userId);\n      _this9.likesCount.next(likedAlbums.length);\n    })();\n  }\n  // Estado de la base de datos\n  dbState() {\n    return this.isDbReady.asObservable();\n  }\n  // Contador de likes\n  getLikesCount() {\n    return this.likesCount.asObservable();\n  }\n  // Toast para mostrar mensajes en la aplicaci칩n\n  presentToast(mensaje) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      const toast = yield _this10.toastController.create({\n        message: mensaje,\n        duration: 3000\n      });\n      toast.present();\n    })();\n  }\n};\nDbService = __decorate([Injectable({\n  providedIn: 'root'\n})\n//        RE IMPLEMENTACI칍N DE SQL LITE!!!\n//\n// \n// \n// \n// (Finalmente)...\n], DbService);\nexport { DbService };","map":{"version":3,"names":["Injectable","BehaviorSubject","DbService","constructor","toastController","sqlite","platform","isDbReady","listaUsuarios","likesCount","crearBD","ready","then","create","name","location","db","database","presentToast","crearTablas","catch","e","query","executeSql","cargarUsuarios","next","res","usuarios","i","rows","length","push","item","addUser","email","password","nombreUsuario","_this","_asyncToGenerator","data","validateUser","_this2","user","userExists","_this3","updateUser","id","_this4","updateUserPassword","newPassword","_this5","likeAlbum","userId","albumId","_this6","updateLikesCount","dislikeAlbum","_this7","getLikedAlbums","_this8","likedAlbums","_this9","dbState","asObservable","getLikesCount","mensaje","_this10","toast","message","duration","present","__decorate","providedIn"],"sources":["D:\\Repositorios Oficial\\Aplicacion-Movil\\APP-Mov\\discoverify\\src\\app\\services\\dbservice.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ToastController } from '@ionic/angular';\nimport { SQLite, SQLiteObject } from '@awesome-cordova-plugins/sqlite/ngx';\nimport { Platform } from '@ionic/angular';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n\n//        RE IMPLEMENTACI칍N DE SQL LITE!!!\n//\n// \n// \n// \n// (Finalmente)...\n\nexport class DbService {\n  private database!: SQLiteObject;\n  private isDbReady = new BehaviorSubject<boolean>(false);\n  private listaUsuarios = new BehaviorSubject<any[]>([]);\n  private likesCount = new BehaviorSubject<number>(0);\n\n  constructor(private toastController: ToastController, private sqlite: SQLite, private platform: Platform) {\n    this.crearBD();\n  }\n\n  crearBD() {\n    this.platform.ready().then(() => {\n      this.sqlite.create({\n        name: 'discoverify.db',\n        location: 'default'\n      }).then((db: SQLiteObject) => {\n        this.database = db;\n        this.presentToast(\"Base de datos creada.\");\n        this.crearTablas();\n      }).catch(e => this.presentToast(`Error al crear BD: ${e}`)); // Mostrar mensaje de error si falla la creaci칩n de la base de datos\n    });\n  }\n\n  crearTablas() { // Crear tablas de la base de datos si no existen\n    const query = `\n      CREATE TABLE IF NOT EXISTS usuarios (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        email TEXT NOT NULL,\n        password TEXT NOT NULL,\n        nombreUsuario TEXT NOT NULL\n      );\n      CREATE TABLE IF NOT EXISTS likes (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        userId INTEGER,\n        albumId TEXT,\n        FOREIGN KEY (userId) REFERENCES usuarios(id)\n      );\n    `;\n    this.database.executeSql(query, []).then(() => {\n      this.cargarUsuarios();\n      this.isDbReady.next(true);\n    }).catch(e => this.presentToast(`Error creando tablas: ${e}`)); // Mostrar mensaje de error si falla la creaci칩n de tablas\n  }\n\n  // Cargar usuarios de la tabla\n  cargarUsuarios() { \n    const query = 'SELECT * FROM usuarios';\n    this.database.executeSql(query, []).then(res => {\n      const usuarios: any[] = [];\n      for (let i = 0; i < res.rows.length; i++) {\n        usuarios.push(res.rows.item(i));\n      }\n      this.listaUsuarios.next(usuarios); // Actualizar la lista de usuarios\n    });\n  }\n\n  // A침adir un nuevo usuario\n  async addUser(email: string, password: string, nombreUsuario: string) {\n    const data = [email, password, nombreUsuario];\n    await this.database.executeSql('INSERT INTO usuarios (email, password, nombreUsuario) VALUES (?, ?, ?)', data); // Insertar usuario en la base de datos, \n    //el significado de \"VALUES (?, ?, ?)\" es que se insertar치n los valores de las variables data en el orden en que se encuentran.\n    this.cargarUsuarios();\n    this.presentToast('Usuario agregado'); \n  }\n\n  // Validar si el usuario existe en la base de datos\n  async validateUser(email: string, password: string): Promise<boolean> {\n    const data = [email, password];\n    const res = await this.database.executeSql('SELECT * FROM usuarios WHERE email = ? AND password = ?', data); // data es un array que contiene los valores de email y password\n  \n    if (res.rows.length > 0) {\n      const user = res.rows.item(0);\n      this.presentToast(`Bienvenido/a 游뱁! ${user.nombreUsuario}`);\n      return true;\n    }\n    return false;\n  }\n\n  // Comprobar si el correo ya existe\n  async userExists(email: string): Promise<boolean> {\n    const res = await this.database.executeSql('SELECT * FROM usuarios WHERE email = ?', [email]);\n    return res.rows.length > 0;\n  }\n\n  // Actualizar datos del usuario\n  async updateUser(id: number, email: string, password: string, nombreUsuario: string) {\n    const data = [email, password, nombreUsuario, id];\n    await this.database.executeSql('UPDATE usuarios SET email = ?, password = ?, nombreUsuario = ? WHERE id = ?', data);\n    this.cargarUsuarios();\n    this.presentToast('Usuario actualizado');\n  }\n\n  // M칠todo para actualizar la contrase침a de un usuario por correo\n  async updateUserPassword(email: string, newPassword: string): Promise<void> {\n    const data = [newPassword, email];\n    await this.database.executeSql('UPDATE usuarios SET password = ? WHERE email = ?', data);\n  }\n\n  // Dar like a un 치lbum\n  async likeAlbum(userId: string, albumId: string) {\n    const data = [userId, albumId];\n    await this.database.executeSql('INSERT INTO likes (userId, albumId) VALUES (?, ?)', data);\n    this.updateLikesCount(userId);\n  }\n\n  // Dar dislike a un 치lbum\n  async dislikeAlbum(userId: string, albumId: string) {\n    await this.database.executeSql('DELETE FROM likes WHERE userId = ? AND albumId = ?', [userId, albumId]);\n    this.updateLikesCount(userId);\n  }\n\n  // Obtener 치lbumes con \"like\"\n  async getLikedAlbums(userId: string): Promise<string[]> {\n    const data = [userId];\n    const res = await this.database.executeSql('SELECT albumId FROM likes WHERE userId = ?', data);\n    const likedAlbums: string[] = [];\n    for (let i = 0; i < res.rows.length; i++) {\n      likedAlbums.push(res.rows.item(i).albumId);\n    }\n    return likedAlbums;\n  }\n\n  // Actualizar contador de likes\n  async updateLikesCount(userId: string) {\n    const likedAlbums = await this.getLikedAlbums(userId);\n    this.likesCount.next(likedAlbums.length);\n  }\n\n  // Estado de la base de datos\n  dbState(): Observable<boolean> {\n    return this.isDbReady.asObservable();\n  }\n\n  // Contador de likes\n  getLikesCount(): Observable<number> {\n    return this.likesCount.asObservable();\n  }\n\n  // Toast para mostrar mensajes en la aplicaci칩n\n  async presentToast(mensaje: string) {\n    const toast = await this.toastController.create({\n      message: mensaje,\n      duration: 3000,\n    });\n    toast.present();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}