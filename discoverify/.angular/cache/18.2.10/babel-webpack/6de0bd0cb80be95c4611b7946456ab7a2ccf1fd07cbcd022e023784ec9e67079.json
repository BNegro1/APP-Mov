{"ast":null,"code":"var _SpotifyAlbumService;\nimport { HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./spotify-auth.service\";\nexport class SpotifyAlbumService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.spotifyApiUrl = 'https://api.spotify.com/v1';\n  }\n  searchAlbums(query, limit, offset) {\n    return new Observable(observer => {\n      this.authService.getAccessToken().then(token => {\n        const headers = new HttpHeaders({\n          Authorization: `Bearer ${token}`\n        });\n        this.http.get(`${this.spotifyApiUrl}/search?type=album&q=${encodeURIComponent(query)}&limit=${limit}&offset=${offset}`, {\n          headers\n        }).pipe(map(response => this.processAlbumSearch(response.albums.items)), catchError(error => {\n          console.error('Error searching albums:', error);\n          observer.error(error);\n          return [];\n        })).subscribe(albums => {\n          observer.next(albums);\n          observer.complete();\n        });\n      });\n    });\n  }\n  // Procesar respuesta de la api de spotify para  agregarla a Interface \n  processAlbumSearch(albums) {\n    return albums.map(album => {\n      var _album$images$;\n      return {\n        id: album.id,\n        title: album.name,\n        artist: album.artists[0].name,\n        releaseDate: album.release_date,\n        genre: 'Unknown',\n        // La API NO INCLUYE GENERO, PERO VERIFICAR MÁS ADELANTE\n        cover: ((_album$images$ = album.images[0]) === null || _album$images$ === void 0 ? void 0 : _album$images$.url) || 'https://via.placeholder.com/300'\n      };\n    });\n  }\n}\n_SpotifyAlbumService = SpotifyAlbumService;\n_SpotifyAlbumService.ɵfac = function SpotifyAlbumService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _SpotifyAlbumService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SpotifyAuthService));\n};\n_SpotifyAlbumService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _SpotifyAlbumService,\n  factory: _SpotifyAlbumService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","Observable","map","catchError","SpotifyAlbumService","constructor","http","authService","spotifyApiUrl","searchAlbums","query","limit","offset","observer","getAccessToken","then","token","headers","Authorization","get","encodeURIComponent","pipe","response","processAlbumSearch","albums","items","error","console","subscribe","next","complete","album","_album$images$","id","title","name","artist","artists","releaseDate","release_date","genre","cover","images","url","i0","ɵɵinject","i1","HttpClient","i2","SpotifyAuthService","factory","ɵfac","providedIn"],"sources":["D:\\Repositorios Oficial\\Aplicacion-Movil\\APP-Mov\\discoverify\\src\\app\\services\\spotify-album.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { SpotifyAuthService } from './spotify-auth.service';\nimport { map, catchError } from 'rxjs/operators';\n\nexport interface Album { // Interface para el álbum\n  id: string;\n  title: string;\n  artist: string;\n  releaseDate: string;\n  genre: string;\n  cover: string;\n  liked?: boolean; \n  disliked?: boolean; \n}\n\n@Injectable({\n  providedIn: 'root',\n})\n\nexport class SpotifyAlbumService {\n  private spotifyApiUrl = 'https://api.spotify.com/v1';\n\n  constructor(\n    private http: HttpClient,\n    private authService: SpotifyAuthService\n  ) {}\n\n  searchAlbums(\n    query: string,\n    limit: number,\n    offset: number\n  ): Observable<Album[]> {\n    return new Observable((observer) => {\n      this.authService.getAccessToken().then((token) => {\n        const headers = new HttpHeaders({\n          Authorization: `Bearer ${token}`,\n        });\n\n        this.http\n          .get(\n            `${this.spotifyApiUrl}/search?type=album&q=${encodeURIComponent(\n              query\n            )}&limit=${limit}&offset=${offset}`,\n            { headers }\n          )\n          .pipe(\n            map((response: any) =>\n              this.processAlbumSearch(response.albums.items)\n            ),\n            catchError((error) => {\n              console.error('Error searching albums:', error);\n              observer.error(error);\n              return [];\n            })\n          )\n          .subscribe((albums) => {\n            observer.next(albums);\n            observer.complete();\n          });\n      });\n    });\n  }\n\n  // Procesar respuesta de la api de spotify para  agregarla a Interface \n  private processAlbumSearch(albums: any[]): Album[] {\n    return albums.map((album) => ({ \n      id: album.id,\n      title: album.name,\n      artist: album.artists[0].name,\n      releaseDate: album.release_date,\n      genre: 'Unknown', // La API NO INCLUYE GENERO, PERO VERIFICAR MÁS ADELANTE\n      cover: album.images[0]?.url || 'https://via.placeholder.com/300',\n    }));\n  }\n}\n"],"mappings":";AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,UAAU,QAAQ,MAAM;AAEjC,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;;;;AAiBhD,OAAM,MAAOC,mBAAmB;EAG9BC,YACUC,IAAgB,EAChBC,WAA+B;IAD/B,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,WAAW,GAAXA,WAAW;IAJb,KAAAC,aAAa,GAAG,4BAA4B;EAKjD;EAEHC,YAAYA,CACVC,KAAa,EACbC,KAAa,EACbC,MAAc;IAEd,OAAO,IAAIX,UAAU,CAAEY,QAAQ,IAAI;MACjC,IAAI,CAACN,WAAW,CAACO,cAAc,EAAE,CAACC,IAAI,CAAEC,KAAK,IAAI;QAC/C,MAAMC,OAAO,GAAG,IAAIjB,WAAW,CAAC;UAC9BkB,aAAa,EAAE,UAAUF,KAAK;SAC/B,CAAC;QAEF,IAAI,CAACV,IAAI,CACNa,GAAG,CACF,GAAG,IAAI,CAACX,aAAa,wBAAwBY,kBAAkB,CAC7DV,KAAK,CACN,UAAUC,KAAK,WAAWC,MAAM,EAAE,EACnC;UAAEK;QAAO,CAAE,CACZ,CACAI,IAAI,CACHnB,GAAG,CAAEoB,QAAa,IAChB,IAAI,CAACC,kBAAkB,CAACD,QAAQ,CAACE,MAAM,CAACC,KAAK,CAAC,CAC/C,EACDtB,UAAU,CAAEuB,KAAK,IAAI;UACnBC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;UAC/Cb,QAAQ,CAACa,KAAK,CAACA,KAAK,CAAC;UACrB,OAAO,EAAE;QACX,CAAC,CAAC,CACH,CACAE,SAAS,CAAEJ,MAAM,IAAI;UACpBX,QAAQ,CAACgB,IAAI,CAACL,MAAM,CAAC;UACrBX,QAAQ,CAACiB,QAAQ,EAAE;QACrB,CAAC,CAAC;MACN,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA;EACQP,kBAAkBA,CAACC,MAAa;IACtC,OAAOA,MAAM,CAACtB,GAAG,CAAE6B,KAAK;MAAA,IAAAC,cAAA;MAAA,OAAM;QAC5BC,EAAE,EAAEF,KAAK,CAACE,EAAE;QACZC,KAAK,EAAEH,KAAK,CAACI,IAAI;QACjBC,MAAM,EAAEL,KAAK,CAACM,OAAO,CAAC,CAAC,CAAC,CAACF,IAAI;QAC7BG,WAAW,EAAEP,KAAK,CAACQ,YAAY;QAC/BC,KAAK,EAAE,SAAS;QAAE;QAClBC,KAAK,EAAE,EAAAT,cAAA,GAAAD,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,cAAAV,cAAA,uBAAfA,cAAA,CAAiBW,GAAG,KAAI;OAChC;IAAA,CAAC,CAAC;EACL;;uBAtDWvC,mBAAmB;;mCAAnBA,oBAAmB,EAAAwC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,kBAAA;AAAA;;SAAnB7C,oBAAmB;EAAA8C,OAAA,EAAnB9C,oBAAmB,CAAA+C,IAAA;EAAAC,UAAA,EAHlB;AAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}